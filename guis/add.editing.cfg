// init vars
	//menu vars
//NOTE: sub1_mapedit_active "first is the name of the submenu command; the second the name of the button with _ instead of spaces, its needed to detect which button is active for different colours
sub1_material_active = "general General"
sub1_mapedit_active = "info Info"

	//vars
detectedaction = ""
buttonsrollover_count = 0

// gui commands
bordertabbutton = [//$arg1 = name; $arg2 = buttonaction; $arg3 = 0 (horiz), = 1 (vertic), $arg4 = buttonfontsize; $arg5 = which tabmenu for checking if its active or not
	if (=s (stringreplace (sublist $$arg5 1 1) "_" " ") $arg1) [isactive = 1] [isactive = 0]
	if $isactive [//colour for active not active
		bordertabbuttoncolour = "0xFFFFFF"
		actguibordercol = "0xFFFFFF"
	][
		bordertabbuttoncolour = "0x808080"
		actguibordercol = "0x000000"
	]
	if (&~ (=s $detectedaction $arg2) $isactive) [//if the button is rollovered
		actguibordercol = "0xFF0000"
	]
	guilist [ guifont $arg4 [
		guibackground $guifieldbgcolour $guifieldbgblend $actguibordercol $guifieldborderblend 1
		if $arg3 [//button horizontal
			guistrut 0.1
			guilist [
				guistrut 0.4
				if $isactive [//when button active nohitguifx
					guinohitfx [
						guibutton $arg1 $arg2 [] [] $bordertabbuttoncolour
					]
				][
					guibutton $arg1 $arg2 [] [] $bordertabbuttoncolour
				]
				guistrut 0.4
			]
			guistrut 0.1
		][//button vertical
			guilist [
				guistrut 0.1
				guilist [
					guistrut 0.4
				if $isactive [//when button active nohitguifx
					guinohitfx [
						guibutton $arg1 $arg2 [] [] $bordertabbuttoncolour
					]
				][
					guibutton $arg1 $arg2 [] [] $bordertabbuttoncolour
				]
					guistrut 0.4
				]
				guistrut 0.1
			]
		]
	] ]
	
]
bordertabbuttonrollover_test = [//test if you onhover over the bordertabbuttons
	if $guirolloveraction [
		detectedaction = $guirolloveraction
		buttonsrollover_count = (+ $guipasses 2)
	][
		if (= $buttonsrollover_count $guipasses)[//deletes only after two no guirolloveractions behind
			detectedaction = ""
			buttonsrollover_count = (+ $guipasses 2)
		]
	]
]
			//guibutton with a guirolloveraction
guibodun = [//$arg1 = name; $arg2 = action; $arg3 = alt-act; $arg4 =  icon; $arg5 = colour; $arg6 = onhover
	guibody [
		guibutton $arg1 [] [] $arg4 $arg5
		if (dobindsearch [@arg2] edit) [
			guistrut 1
			guibutton (dobindsearch [@arg2] edit)
		]
	] $arg2 $arg3 $arg6
]
			//for using the inputgui use this schema: (<what to do with the result of inputgui> (inputgui <header message> <which var should be changed> <ok button execute> <guistatus msg>) )
			//WARNING! Ok Button needs in the action even the cleargui 1
inputgui = [//$arg1 = header message; $arg2 = input var; $arg3 = what to do when you want to change it; $arg4 = Cancel Button; $arg4 = special message, e.g. hints; result = when ok the written content
	input_temp_var = $arg2
	inputgui_prev = $$arg2// content of the var/cmd
	inputgui_result = ""
	inputgui_exec = $arg3//content will execute when pressing ok
	input_temp_msg = $arg4
	newgui input_gui [
		guiheader @arg1
		guitext (format "^fwCurrent: ^fC%1" $inputgui_prev) [] [] [] [5000]
		guistrut 0.5
		guicenter [
			guifield inputgui_result -30 [] [0xFFFFFF] [1] [] [] ""
		]
		guistrut 0.5
		guicenter [ guifont "command" [
			guibutton "^fgOK" [
				(inputgui_exec)
			]
			guistrut 3
			guibutton "^frCancel" [cleargui 1]
		] ]
		if $input_temp_msg [
			guifont "little" [
				guistatus $input_temp_msg [1000]
			]
		]
	]
	showgui input_gui
]
			//makes a tabelle with a left part and a right part, works not like it should
guisplit2 = [//$arg1 = left part; $arg2 = right part; $arg3 = distance btw left and right; $arg4 = onhover;
	guibody [
		guilist [
			arg1 //executes the first arg
		]
		guistrut $arg3
		guispring 1
		guilist [
			guistrut 25 1
			arg2 //executes the second arg
		]
	] [] [] [@arg4]
]
			//extended guislider, adds an option for the length
guisliderext = [//$arg1 = length; $arg2 = var; $arg3 =  min; $arg4 =  max; $arg5 =  onchange; $arg6 =  reverse; $arg7 =  scroll; $arg8 =  colour; $arg9 =  style; $arg10 =  slidercolour
	guilist [
		guistrut 0.2
		guilist [ guilist [
			guistrut $arg1 1
				guislider $arg2 $arg3 $arg4 $arg5 $arg6 $arg7 $arg8 $arg9 $arg10
		] ]
	]
]
guifontext = [ //custom guifontsize
	fontalias (format "fontsize %1" $arg1) "default"
	fontscale $arg1
	guifont (format "fontsize %1" $arg1) [
		arg2 //executes the second arg
	]
]

//commands
dectohex = [//$arg1 = decimal number; result = hex number
	intres_temp = $arg1
	dectohex_result = ""
	while [!= $intres_temp 0] [
		addhex_temp = (mod $intres_temp 16)
		if (> $addhex_temp 9) [
			case ($addhex_temp
				) 10 [ addhex_temp = "A"
				] 11 [ addhex_temp = "B"
				] 12 [ addhex_temp = "C"
				] 13 [ addhex_temp = "D"
				] 14 [ addhex_temp = "E"
				] 15 [ addhex_temp = "F"
			]
		]
		dectohex_result = (concatword $addhex_temp $dectohex_result)
		intres_temp = (div $intres_temp 16)
	]
	result $dectohex_result
]
playersonserv = [
	result (- (listlen (listclients 1 0)) (listlen (listclients 0 2)))
]

// gui tabs
mapedit_tab = [
	guistayopen [
		guilist [//submenu row
			guilist [
				guilist [
					bordertabbutton "Info" [sub1_mapedit_active = "info Info"] 1 "command" "sub1_mapedit_active"
					guistrut 0.5
					bordertabbutton "Save and load" [sub1_mapedit_active = "save_and_load Save_and_load"] 1 "command" "sub1_mapedit_active"
					guistrut 0.5
					bordertabbutton "Map settings" [sub1_mapedit_active = "map_settings Map_settings"] 1 "command" "sub1_mapedit_active"
				]
				guistrut 0.4
			]
			guistrut 0.6
		]
		((format "sub2_mapedit_%1" (sublist $sub1_mapedit_active 0 1)) ) //cexecutes the choosen menu
	]
	guivisibletab [guistatus $guistatus_mapedit_msg [2500]]
]

sub2_mapedit_info = [
	guistatus_mapedit_msg = "Map main menu - info"
	guibar 5 0 0xFFFFFF
	guistrut 0.5
	
	guilist [
		if $maptitle [
			guibodun $maptitle [(inputgui "Set mapname" maptitle [maptitle $inputgui_result; cleargui 1])] [saycommand /maptitle""] [] [0xC0C0C0] [guistatus_mapedit_msg = "change the maptitle^n^fB/maptitle"]//inputgui: cmd
		][
			guibodun "<Name>" [(inputgui "Set mapname" maptitle [maptitle $inputgui_result; cleargui 1])] [saycommand /maptitle""] [] [0xC0C0C0] [guistatus_mapedit_msg = "change the maptitle^n^fB/maptitle"]//inputgui: cmd
		]
		guitext "^fw created by "
		if $mapauthor [
			guibodun $mapauthor [(inputgui "Set mapauthor" mapauthor [mapauthor $inputgui_result; cleargui 1])]  [saycommand /mapauthor""] [] [0xC0C0C0] [guistatus_mapedit_msg = "change the mapauthor^n^fB/mapauthor"]//inputgui: cmd
		][
			guibodun "<Name>" [(inputgui "Set mapauthor" mapauthor [mapauthor $inputgui_result; cleargui 1])] [saycommand /mapauthor""] [] [0xC0C0C0] [guistatus_mapedit_msg = "change the mapauthor^n^fB/mapauthor"]//inputgui: cmd
		]
		guispring 1
	]
	guilist [
		guilist [
			guistrut 0.5
			guibody [
				guiimage (format "%1.png" $mapname) [] [10] [0] "textures/nothumb"
			] [cleargui; showgui newmapshot] [] [] [0xFFFFFF] [] [guistatus_mapedit_msg = "click to make a new mapshot^n^fB/savemapshot"]
		]
		guistrut 0.5
		guibar 5 0 0xFFFFFF
		guistrut 0.5
		guilist [
			guistrut 0.3
			guitext (format "^fwRevision: ^fa%1" (maprevision))
			guitext (format "^fwMap size: ^fa%1" (mapsize))
			guitext (format "^fwBounding box size: ^fa%1" (<< 1 $mapsize))
			guilist [
				guitext "^fwFile: "
				guibodun $mapname [
					(inputgui "Set mapfile" mapname [//inputgui: cmd
						inputgui_result = (stringreplace $inputgui_result " " "_")//prevent spaces in the mapname because then the map cant saved correct
						if $inputgui_result [
							if (= (stringstr $inputgui_result "/") -1) [//when no subfolder is found
								(mapname (concatword "maps/" $inputgui_result))
							][
								(mapname $inputgui_result)
							]
						][
							newgui info [guiheader "info"; guione [ guitext "No path given. ^frNothing^fw changed..." ] ]; showgui info //if nothing has changed
							sleep 2000 [cleargui 2]
						]
					] "The map will be saved in the user directory. For sub folder use this schema: folder/folder/.../mapfilename^nIf no folder is given it will be saved under maps/")
					showgui input_gui
				] [saycommand /mapname""] [] [0xC0C0C0] [guistatus_mapedit_msg = "change the mapname^n^fB/mapname"]
			]
			guitext (format "^fwmap file format Version: ^fa%1" (mapversion))
			guilist [
				guitext "^fwMapmusic: "
				if $mapmusic [
					guibodun $mapmusic [showgui chosemusic] [saycommand /mapmusic""] [] [0xC0C0C0] [guistatus_mapedit_msg = "change mapmusic^n^fB/mapmusic"]//inputgui: cmd
				][
					guibodun "<Music>" [showgui chosemusic] [saycommand /mapmusic""] [] [0xC0C0C0] [guistatus_mapedit_msg = "chose a mapmusic^n^fB/mapmusic"]//inputgui: cmd
				]
			]
		]
	]
]
sub2_mapedit_save_and_load = [
	guistatus_mapedit_msg = "Save and load"
	guibar 5 0 0xFFFFFF
	guistrut 0.5

	guibodun "^faSave map" [savemap] [saycommand /savemap] [] [] [guistatus_mapedit_msg = "Saves the map. ^n^fB/savemap"]
	guibodun "^faSave waypoints" [savewaypoints] [saycommand /savewaypoints] [] [] [guistatus_mapedit_msg = "Saves only the waypoints.^n^fB/savewaypoints"]
	guibodun "^faSave map with waypoints" [savemap; savewaypoints] [saycommand "/savemap; savewaypoints"] [] [] [guistatus_mapedit_msg = "Saves the map with waypoints.^n^fB/savemap; savewaypoints"]
	guibodun "^faSave as final version" [fullbright 0; calclight 1; texturecull; savemap; savewaypoints] [saycommand "/fullbright 0; calclight 1; texturecull; savemap; savewaypoints"] [] [] [guistatus_mapedit_msg = "Calc light and clear all unused textures from map cfg and saves the map. ^n^fB/fullbright 0; calclight 1; texturecull; savemap"]
	guistrut 0.5
	if (&& (isonline) (playersonserv)) [ //when online show vote instead of reload
		guibodun "^faVote map again" [savewarnchk [edit $mapname]] [saycommand /edit ($mapname)] [] [] [guistatus_mapedit_msg = "Vote or force editing the current map^n^fB/edit"]
	][
		guibodun "^faReload map" [savewarnchk [edit $mapname] ] [saycommand /edit $mapname] [] [] [guistatus_mapedit_msg = "Reload the current map^n^fB/edit"]
	]
	guibodun "^faLoad a previous version" [showgui prev_mapversion] [] [] [] [guistatus_mapedit_msg = "Choose and load a previous version of this mapname"]
]
sub2_mapedit_map_settings = [
	guistatus_mapedit_msg = "Map settings"
	guibar 5 0 0xFFFFFF
	guistrut 0.5

	guisplit2 [guistrut 0.1; guitext "Numplayers:"] [
		guilist [
			guifield numplayers 3 [] [0xFFFFFF] [] [] [] ""
			guistrut 1
			guilist [
				guistrut 0.12
				if (= $numplayers (getvardef numplayers 1)) [ //button for resetting to default
					guinohitfx [
						guiimage "textures/checkdisable" [] 0.6
					]
				][
					guiimage "textures/guiexit" [numplayers (getvardef numplayers 1)] 0.6
				]
			]
			guistrut 1
			guisliderext 15 numplayers 0 256 [] [] [] [0xC0C0C0] [] [0xFFFFFF] //additional guislider for fast changing
		]
	] 1 [guistatus_mapedit_msg = "change the numplayers (range: 0-256)^n^fB/numplayers"]
	guisplit2 [guistrut 0.1; guitext "Maxplayers:"] [
		guilist [
			guifield maxplayers 3 [] [0xFFFFFF] [] [] [] ""
			guistrut 1
			guilist [
				guistrut 0.12
				if (= $maxplayers (getvardef maxplayers 1)) [ //button for resetting to default
					guinohitfx [
						guiimage "textures/checkdisable" [] 0.6
					]
				][
					guiimage "textures/guiexit" [maxplayers (getvardef maxplayers 1)] 0.6
				]
			]
			guistrut 1
			guisliderext 15 maxplayers 0 256 [] [] [] [0xC0C0C0] [] [0xFFFFFF] //additional guislider for fast changing
		]
	] 1 [guistatus_mapedit_msg = "Maximum players who can play on this map (range: 0-256)^n^fB/maxplayers"]
	guisplit2 [guistrut 0.1; guitext "Asymetric Map:"] [
		guilist [
			guifield mapbalance 3 [] [0xFFFFFF] [] [] [] ""
			guistrut 1
			guilist [
				guistrut 0.12
				if (= $mapbalance (getvardef mapbalance)) [ //button for resetting to default
					guinohitfx [
						guiimage "textures/checkdisable" [] 0.6
					]
				][
					guiimage "textures/guiexit" [mapbalance (getvardef mapbalance)] 0.6
				]
			]
			guistrut 1
			guisliderext 4 mapbalance 0 3 [] [] [] [0xC0C0C0] [] [0xFFFFFF] //additional guislider for fast changing
		]
	] 1 [guistatus_mapedit_msg = "Switch the teams after halftime^n^fo0 ^fw= No balance; ^fo1 ^fw= Only balance in ctf/dac/bb; ^fo2 ^fw= balance in all modes; 3 = forced^n^fB/mapbalance"]
	guispring 20 10
	guitext "Help"
]
//~~~~~~~~~~~~~~~~~~
material_tab = [
	guistayopen [
		guilist [//submenu row
			guilist [
				guilist [
					bordertabbutton "General" [sub1_material_active = "general General"] 1 "command" "sub1_material_active"
					guistrut 0.5
					bordertabbutton "Water" [sub1_material_active = "water Water"] 1 "command" "sub1_material_active"
					guistrut 0.5
					bordertabbutton "Grass" [sub1_material_active = "grass Grass"] 1 "command" "sub1_material_active"
					guistrut 0.5
					bordertabbutton "Obituaries" [sub1_material_active = "obituaries Obituaries"] 1 "command" "sub1_material_active"
					guistrut 0.5
				]
				guistrut 0.4
			]
			guistrut 0.6
		]
		((format "sub2_material_%1" (sublist $sub1_material_active 0 1)) ) //cexecutes the choosen menu
	]
	guivisibletab [guistatus $guistatus_material_msg [2500]]
]

sub2_material_general = [
	guistatus_material_msg = (format "material options - for a short menu press %1" (dobindsearch "showgui materials" edit))
	guibar 5 0 0xFFFFFF
	guistrut 0.5
	
	guibody [
		guicheckbox "show material volumes" showmat
		guistrut 0.5
		guibutton (dobindsearch "showmat (= $showmat 0); if (= $showmat 0) [echo showmat OFF] [ echo showmat ON]" edit)
	] [if $showmat [showmat 1; echo "showmat ON"] [showmat 0;  echo "showmat OFF"]] [saycommand /@showmat] [guistatus_materialmenu_msg = "show material volumes^n^fB/showmat"]
	guistrut 0.4
	guilist [ //heading line
		guitext "^fCmaterial"
		guistrut 18
		guitext "^fCfog"
		guistrut 2
		guitext "^fCspec"
	]
	guistrut 0.2
	s = 1
	looplist i [water lava glass] [ //lists the water, lava, glass options
		looplist j ["" 2 3 4] [ //adds the numbered materials
			guilist [
				guitext (tabify @i@j 2)
				guilist [
					guibackground $@i@(j)colour $guibgblend [] [] 0 //makes the background coloured as the current colour because the button needs to be visible even when its black
					guilist [
						guistrut 0.3
						guibodun "colour" [ice_pickcolour @@i@@(j)colour] [saycommand /@@i@@(j)colour""] [] [0xC0C0C0] [guistatus_material_msg = (format "colour of %1^n^fB/%1colour" @@i@@(j))] //opens the pickcolour menu
						guistrut 0.3
					]
				]
				guistrut 1
				if (=s $i "water") [ //only water has a fallcolour
					guilist [
						guibackground $@i@(j)colour $guibgblend [] [] 0 //makes the background coloured as the current colour because the button needs to be visible even when its black
						guilist [
							guistrut 0.3
							guibodun "fallcolour" [ice_pickcolour @@i@@(j)fallcolour] [saycommand /@@i@@(j)fallcolour""] [] [0xC0C0C0] [guistatus_material_msg = (format "waterfall colour of %1^n^fB/%1fallcolour" @@i@@(j))]  //opens the pickcolour menu
							guistrut 0.3
						]
					]
					guistrut 1
				] [guistrut 9.05]
				if (!=s $i "glass") [guibody [guifield @i@(j)fog 4] [] [] [guistatus_material_msg = (format "fog distance inside %1^n^fB/%1fog" @i@(j))]]
				if (s) [guifield @i@(j)spec 4]
			]
			if (=s $i "glass") [guistrut 0.3]
		]
		s = 0
	]
]
sub2_material_water = [
	guistatus_material_msg = "Water options"
	guibar 5 0 0xFFFFFF
	guistrut 0.5

	guisplit2 [guistrut 0.1; guibutton "Watersubdiv:"] [
		guilist [
			guifield watersubdiv 1 [] [0xFFFFFF] [] [] [] ""
			guistrut 1
			guilist [
				guistrut 0.12
				if (= $watersubdiv (getvardef watersubdiv)) [ //button for resetting to default
					guinohitfx [
						guiimage "textures/checkdisable" [] 0.6
					]
				][
					guiimage "textures/guiexit" [watersubdiv (getvardef watersubdiv)] 0.6
				]
			]
			guistrut 1
			guisliderext 4 watersubdiv 0 3 [] [] [] [0xC0C0C0] [] [0xFFFFFF] //additional guislider for fast changing
		]
	] 1 [guistatus_material_msg = "change the water subdiv (range: 0-3)^n^fB/watersubdiv"]
	guisplit2 [guistrut 0.1; guibutton "Waterlod:"] [
		guilist [
			guifield waterlod 1 [] [0xFFFFFF] [] [] [] ""
			guistrut 1
			guilist [
				guistrut 0.12
				if (= $waterlod (getvardef waterlod)) [ //button for resetting to default
					guinohitfx [
						guiimage "textures/checkdisable" [] 0.6
					]
				][
					guiimage "textures/guiexit" [waterlod (getvardef waterlod)] 0.6
				]
			]
			guistrut 1
			guisliderext 4 waterlod 0 3 [] [] [] [0xC0C0C0] [] [0xFFFFFF] //additional guislider for fast changing
		]
	] 1 [guistatus_material_msg = "change the water resoltion (range: 0-3)^n^fB/waterlod"]
	guisplit2 [guistrut 0.1; guibutton "Causticscale:"] [
		guilist [
			guifield causticscale 5 [] [0xFFFFFF] [] [] [] ""
			guistrut 1
			guilist [
				guistrut 0.12
				if (= $causticscale (getvardef causticscale)) [ //button for resetting to default
					guinohitfx [
						guiimage "textures/checkdisable" [] 0.6
					]
				][
					guiimage "textures/guiexit" [causticscale (getvardef causticscale)] 0.6
				]
			]
			guistrut 1
			guisliderext 25 causticscale 1 10000 [] [] [] [0xC0C0C0] [] [0xFFFFFF] //additional guislider for fast changing
		]
	] 1 [guistatus_material_msg = "change the water caustic size (range: 0-10000)^n^fB/causticscale"]
	guisplit2 [guistrut 0.1; guibutton "Causticmillis:"] [
		guilist [
			guifield causticmillis 4 [] [0xFFFFFF] [] [] [] ""
			guistrut 1
			guilist [
				guistrut 0.12
				if (= $causticmillis (getvardef causticmillis)) [ //button for resetting to default
					guinohitfx [
						guiimage "textures/checkdisable" [] 0.6
					]
				][
					guiimage "textures/guiexit" [causticmillis (getvardef causticmillis)] 0.6
				]
			]
			guistrut 1
			guisliderext 25 causticmillis 1 1000 [] [] [] [0xC0C0C0] [] [0xFFFFFF] //additional guislider for fast changing
		]
	] 1 [guistatus_material_msg = "change the water caustic speed (range: 0-1000)^n^fB/causticmillis"]
]
sub2_material_grass = [
	guistatus_material_msg = "Grass options"
	guibar 5 0 0xFFFFFF
	guistrut 0.5

	guilist [
		guibackground $grasscolour $guibgblend [] [] 0 //makes the background coloured as the current colour because the button needs to be visible even when its black
		guistrut 0.3
		guilist [
			guibodun "grasscolour" [ice_pickcolour grasscolour] [saycommand /grasscolour""] [] [0xC0C0C0] [guistatus_material_msg = "Set the colour of grass^n^fB/grasscolour"]
			guistrut 0.1
		]
		guistrut 0.3
	]
	guistrut 0.24
	guisplit2 [guistrut 0.1; guibutton "Grassblend:"] [
		guilist [
			guifield grassblend 4 [] [0xFFFFFF] [] [] [] ""
			guistrut 1
			guilist [
				guistrut 0.12
				if (= $grassblend (getvardef grassblend)) [ //button for resetting to default
					guinohitfx [
						guiimage "textures/checkdisable" [] 0.6
					]
				][
					guiimage "textures/guiexit" [grassblend (getvardef grassblend)] 0.6
				]
			]
		]
	] 1 [guistatus_material_msg = "change the water subdiv (range: 0.0-1.0^n^fB/grassblend"]
	guisplit2 [guistrut 0.1; guibutton "Grassscale:"] [
		guilist [
			guifield grassscale 2 [] [0xFFFFFF] [] [] [] ""
			guistrut 1
			guilist [
				guistrut 0.12
				if (= $grassscale (getvardef grassscale)) [ //button for resetting to default
					guinohitfx [
						guiimage "textures/checkdisable" [] 0.6
					]
				][
					guiimage "textures/guiexit" [grassscale (getvardef grassscale)] 0.6
				]
			]
			guistrut 1
			guisliderext 25 grassscale 0 64 [] [] [] [0xC0C0C0] [] [0xFFFFFF] //additional guislider for fast changing
		]
	] 1 [guistatus_material_msg = "all grass textures scaling (range: 0-64)^n^fB/grassscale"]
	guisplit2 [guistrut 0.1; guibutton "Grassheight:"] [
		guilist [
			guifield grassheight 2 [] [0xFFFFFF] [] [] [] ""
			guistrut 1
			guilist [
				guistrut 0.12
				if (= $grassheight (getvardef grassheight)) [ //button for resetting to default
					guinohitfx [
						guiimage "textures/checkdisable" [] 0.6
					]
				][
					guiimage "textures/guiexit" [grassheight (getvardef grassheight)] 0.6
				]
			]
			guistrut 1
			guisliderext 25 grassheight 0 64 [] [] [] [0xC0C0C0] [] [0xFFFFFF] //additional guislider for fast changing
		]
	] 1 [guistatus_material_msg = "grass height (range: 0-64)^n^fB/grassheight"]
	guisplit2 [guistrut 0.1; guibutton "Grassanimmillis:"] [
		guilist [
			guifield grassanimmillis 5 [] [0xFFFFFF] [] [] [] ""
			guistrut 1
			guilist [
				guistrut 0.12
				if (= $grassanimmillis (getvardef grassanimmillis)) [ //button for resetting to default
					guinohitfx [
						guiimage "textures/checkdisable" [] 0.6
					]
				][
					guiimage "textures/guiexit" [grassanimmillis (getvardef grassanimmillis)] 0.6
				]
			]
			guistrut 1
			guisliderext 25 grassanimmillis 0 60000 [] [] [] [0xC0C0C0] [] [0xFFFFFF] //additional guislider for fast changing
		]
	] 1 [guistatus_material_msg = "grass animation speed (range: 0-60000)^n^fB/grassanimmillis"]
	guisplit2 [guistrut 0.1; guibutton "Grassanimscale:"] [
		guilist [
			guifield grassanimscale 4 [] [0xFFFFFF] [] [] [] ""
			guistrut 1
			guilist [
				guistrut 0.12
				if (= $grassanimscale (getvardef grassanimscale)) [ //button for resetting to default
					guinohitfx [
						guiimage "textures/checkdisable" [] 0.6
					]
				][
					guiimage "textures/guiexit" [grassanimscale (getvardef grassanimscale)] 0.6
				]
			]
		]
	] 1 [guistatus_material_msg = "grass animation scale (range: 0.0-1.0)^n^fB/grassanimscale"]
]
sub2_material_obituaries = [
	guistatus_material_msg = "Death messages"
	guibar 5 0 0xFFFFFF
	guistrut 0.5
	looplist i [fall death water water2 water3 water4 lava lava2 lava3 lava4] [ //makes a list of all obituaries, when nothing is given it shows the default
		guilist [
			guitext $i
			guispring 1
			cases @i "fall" [curobitmsg = "obitlost"
			] "death" [curobitmsg = "obitdeathmat"
			]
			if (=s (substring @i 0 5) "water") [
			curobitmsg = "obitdrowned"
			]
			if (=s (substring @i 0 4) "lava") [
				curobitmsg = "obitmelted"
			]
			guibody [ guilist [
				guifield obit@i -22 [] [0xFFFFFF] [] [] [] $$curobitmsg
				guistrut 1
				guilist [
					guistrut 0.12
					if (^ (=s $[obit@i] "") (=s $[obit@i] $$curobitmsg)) [
						guinohitfx [
							guiimage "textures/checkdisable" [] 0.6
						]
					][
						guiimage "textures/guiexit" [obit@i ""] 0.6
					]
				]
			] ] [] [] [guistatus_material_msg = (format "death message for dying in %1^n^fB/obit%1" @i)]
		]
	]
]

// gui structure
newgui editing_gui [
	guiheader "map"
		mapedit_tab
	guitab "Material"
		material_tab
		
	bordertabbuttonrollover_test //guirollover for bordertabs to make them red when rollover only ONE time in the gui
]

//other sub guis
newgui ice_pickcolour [ guistayopen [ // an updated pickcolour with buttons in the middle
	// scurvar is a command / game variables that takes a hex colour value
	guiheader "pick a colour"
	guifont "emphasis" [
		guitext (format "pick a colour for the variable ^fB/%1" $scurvar)
	]
	if (= $guipasses 0) [ hex = $$scurvar ]
	guistrut 1
	guilist [
		guibody [ guilist [
		guihexpreview (getvardef $scurvar) "default"
		] ] [hex = (getvardef $scurvar)]
		guispring 1
		guibody [ guilist [
		guihexpreview $$scurvar "current"
		] ] [hex = $$scurvar]
		guispring 1
		guihexpreview $hex "new"
		guispring 1
		guilist [
			guirgbsliders hex
		]
	]
	guistrut 1
	guicenter [guitext "^faclick a colour preset below and/or use the RGB-sliders to choose a new colour"] 
	guistrut 1
	guipalette 0.65
	guistrut 0.5
	guifont "emphasis" [ guicenter [ guilist [ guilist [
		guibutton "^fyOK" [@scurvar @hex; cleargui 1] 
		guistrut 3
		guibutton "^fgCancel" [cleargui 1]
	] ] ] ]
] ]
ice_pickcolour = [ scurvar = $arg1; showgui ice_pickcolour ]

newgui materialmenu [//a small material menu
	guistatus_materialmenu_msg = (format "Open this menu everytime with %1" (dobindsearch "showgui materials" edit) )
	guiheader "Material"

	guistayopen [ guibody [ //show material volumes on/off
		guicheckbox "show material volumes" showmat
		guistrut 0.5
		guibutton (dobindsearch "showmat (= $showmat 0); if (= $showmat 0) [echo showmat OFF] [ echo showmat ON]" edit)
	] [if $showmat [showmat 1; echo "showmat ON"] [showmat 0;  echo "showmat OFF"]] [saycommand /@showmat] [guistatus_materialmenu_msg = "show material volumes^n^fB/showmat"] ]
	guistrut 0.5
	looplist mat [air alpha water lava clip noclip aiclip death ladder glass] [//material list
		//guibar 8 0 0xFFFFFF
		guibody [
			guibutton (format "%1" @mat) [] [] [] [0xFFFFFF]
			guispring 1
			guibutton (dobindsearch [editmat @@mat] edit)
		] [editmat @@mat] [saycommand /editmat @@mat] [guistatus_materialmenu_msg = (format "Set the selected cubes to ^fo%1 ^fwmaterial"  @mat)]
	]
	guibar 8 0 0xFFFFFF
	guibar 8 0 0xFFFFFF
	looplist mat [water lava glass] [ //for the numbered material lopplist
		guicenter [
			looplist j [2 3 4] [ //adds the numbered material
				guibody [
					guibutton (format "%1" @mat@j) [] [] [] [0xFFFFFF]
				] [editmat @@mat@j] [saycommand /editmat @@mat@j] [guistatus_materialmenu_msg = (format "Set the selected cubes to ^fo%1 ^fwmaterial"  @mat@j)]
				guispring 1
			]
		]
	]
	guistatus $guistatus_materialmenu_msg
]

newgui chosemusic [ guistayopen [ //you can hear music and chose them as mapmusic
	guiheader "music menu"
	guistatus_msg = "music menu"
	loopfiles i "sounds/music" "ogg" [
		guilist [ 
			guibodun $i [music music/@i] [] $arrowrighttex [0xC0C0C0] [guistatus_msg = "hear this song"]
			guispring 1
			guibodun "" [mapmusic sounds/music/@i; cleargui 1] [] $editingtex [] [guistatus_msg = "use this music ^fB/mapmusic"]
		]
	]
	guilist [
		guibodun clear [music ""] [] $warningtex [0xC0C0C0] [guistatus_msg = "stop music"]
		guispring 1
		guibodun "" [mapmusic ""; cleargui 1] [] $editingtex [] [guistatus_msg = "use no music ^fB/mapmusic"]
	]
	guistatus $guistatus_msg
] ]

prevlistindex = 0
newgui prev_mapversion [
	guiheader "Revision manager"
	mapshortname = $mapname //prepare cutting the name
	while [!= (stringstr $mapshortname "/") -1] [mapshortname = (substring $mapshortname (+ (stringstr $mapshortname "/") 1) (stringlen $mapshortname))] //cut the name
	mapshortnamelen = (stringlen $mapshortname)//to get the length only once
	prevvermaps_list = "" //prepare loop
	loopfiles i "backups\maps" mpz [//returns the map backups
		if (stringncmp $mapshortname $i $mapshortnamelen) [ //filters only the backups of the current map
			prevvermaps_list = (concat $prevvermaps_list (substring $i (+ $mapshortnamelen 2) (stringlen $i)) )//adds only the number to the revision list
		]
	]
	if $prevvermaps_list [//if previous revisions are found
		prevvermaps_list = (sortlist $prevvermaps_list a b [>f $a $b]) //sort the list because its possible that there are revisions over 9999; and in the "wrong" way because the newest should be above
		guitext "Load revision:"
		guistrut 0.5
		guilist [
			guistrut 0.5
			guilist [
				looplist i (sublist $prevvermaps_list $prevlistindex 16) [ //lists all revisions
					guiradio ($i) chovers $i //chovers is the choosen version
				]
			]
			guistrut 1.5
			guislider prevlistindex 0 (max 0 (- (listlen $prevvermaps_list) 16)) [] 1 1 //the max showns rev are 16, if its lower the slider doesnt need to slide, its zero then
			case (stringlen $chovers //adds the in the looplist and guiradio loosed beginning zeros again
			) 3 [
				chovers = (concatword "0" $chovers)
			] 2 [
				chovers = (concatword "00" $chovers)
			] 1 [
				chovers = (concatword "000" $chovers)
			]
			guistrut 0.5
			guicenter [
				guiimage (format "backups\maps\%1.r%2" $mapshortname $chovers) [] 8 1 "textures/nothumb" //loads the image, sometimes there are black images
			]
		]
		guistrut 1
		guicenter [ guifontext 62 [
			if $chovers [
				guibutton "^fgOk" [savewarnchk [edit (format "backups\maps\%1.r%2" $mapshortname $chovers)]]
			][
				guinohitfx [
					guibutton "^faOk" []
				]
			]
			guistrut 5
			guibutton "^frCancel" [cleargui; showgui editing_gui]
		] ]
	][ //if no backuped revision is found
		guione [
			guitext "No previous revisions found."
		]
		guistrut 1
		guicenter [guibutton "^fgOk" [cleargui; showgui editing_gui] ]
	]
] [
	if (= $guipasses 0) [ //deletes the choosen backup revision every time again
		chovers = ""
	]
]

newgui newmapshot [ //will make a new mapimage
	guiheader " "
	guilist [
		guibutton "^fgSet" [savemapshot (format "%1" $mapname); showgui editing_gui 1; reloadtex (format "%1.png" $mapname)]
		guistrut 2
		guibutton "^frCancel" [showgui editing_gui 1]
	]
]
// do
showgui editing_gui 1